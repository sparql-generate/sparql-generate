/*
 * Copyright 2016 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.thesmartenergy.sparql.generate.jena.engine;

import org.apache.jena.query.Dataset;
import org.apache.jena.query.QuerySolution;
import org.apache.jena.rdf.model.Model;
import org.apache.jena.riot.system.StreamRDF;
import org.apache.jena.sparql.util.Context;

/**
 * Class to execute SPARQL-Generate queries.
 * Instances of this class are created by a {@link PlanFactory}.
 * Then, call one of the <code>exec</code> methods to trigger the
 * RDF generation.
 * <p>
 * The SPARQL Select part of a SPARQL-Generate is evaluated on a RDF model, or a
 * SPARQL Dataset. The corresponding parameters are
 * <code>inputModel</code> or <code>inputDataset</code>.
 * To instantiate a {@link Model}, one may use:
 * <pre>
 * ModelFactory.createDefaultModel()
 * </pre>
 * To instantiate a {@link Dataset}, one may use:
 * <pre>
 * DatasetFactory.create(Model);
 * </pre>
 * <p>
 * RDF generated by the execution plan is added to a <code>Model</code>, that is
 * either created and returned, or passed as parameter <code>initialModel</code>
 * and augmented by the method. Hence:
 * <ul>
 *   <li>If <code>initialModel == null</code>, then an
 * <code>IllegalArgumentException</code> exception will be thrown.</li>
 *   <li>The behaviour when the same instance is passed as
 * <code>inputModel</code> and <code>initialModel</code> is not specified.</li>
 * </ul>
 *
 * <p>
 * One may execute the query with initial bindings. This
 * is equivalent to adding (or augmenting) a SPARQL
 * <a href="https://www.w3.org/TR/sparql11-query/#inline-data">VALUES</a> clause
 * on the query. This is how a document, represented by a RDF literal, may be
 * bound to a SPARQL variable.
 * <p>
 * Suppose one needs to execute a plan with a variable <code>?msg</code>
 * bound to a web document with textual representation <code>"mymessage"</code>
 * and internet media-type <em>application/json</em>.
 * Then the RDF literal to bind to <code>?msg</code>:
 * <ul>
 *  <li>has lexical form <code>"mymessage"</code></li>
 *  <li>has datatype IRI <code>{@code <http://www.iana.org/assignments/media-types/application/json>}</code>
 * </li>
 * </ul>
 * <p>
 * In SPARQL-Generate over Apache Jena, one calls an <code>exec</code> method
 * with parameter <code>initialBindings</code>.
 * <p>As a complete example, the following code executes a plan for the example
 * above:
 * <pre>{@code
 * String variable = "msg";
 * String message = "mymessage";
 * String uri = "http://www.iana.org/assignments/media-types/application/json";
 *
 * Model initialModel = ModelFactory.createDefaultModel();
 * TypeMapper typeMapper = TypeMapper.getInstance();
 * RDFDatatype dt = typeMapper.getSafeTypeByName(uri);
 * Node arqLiteral = NodeFactory.createLiteral(message, dt);
 * RDFNode jenaLiteral = initialModel.asRDFNode(arqLiteral);
 * initialBindings.put(variable, jenaLiteral);
 *
 * plan.exec(initialBinding, initialModel);
 * }</pre>
 *
 *
 * @author Maxime Lefran√ßois <maxime.lefrancois at emse.fr>
 */
public interface RootPlan extends GeneratePlan, GenerateTemplateElementPlan {

    /**
     * Executes a SPARQL-Generate query. And returns the generated RDF triples.
     *
     * @return the Model that contains the generated RDF triples.
     */
    Model exec();

    /**
     * Executes a SPARQL-Generate query. And returns the generated RDF triples.
     *
     * @param context the execution context
     * @return the Model that contains the generated RDF triples.
     */
    Model exec(Context context);

    /**
     * Executes a SPARQL-Generate query. Emit generated triples to the stream.
     *
     * @param outputStream the RDF Stream object.
     */
    void exec(StreamRDF outputStream);

    /**
     * Executes a SPARQL-Generate query. Emit generated triples to the stream.
     *
     * @param context the execution context
     * @param outputStream the RDF Stream object.
     */
    void exec(StreamRDF outputStream, Context context);

    /**
     * Executes a SPARQL-Generate query. Uses the given {@code inputModel}
     * for the SPARQL SELECT part of the query. And returns the generated RDF
     * triples.
     *
     * @param inputModel the Model to use for the SPARQL SELECT part of the
     * query.
     * @return the Model that contains the generated RDF triples.
     */
    Model exec(Model inputModel);

    /**
     * Executes a SPARQL-Generate query. Uses the given {@code inputModel}
     * for the SPARQL SELECT part of the query. And returns the generated RDF
     * triples.
     *
     * @param context the execution context
     * @param inputModel the Model to use for the SPARQL SELECT part of the
     * query.
     * @return the Model that contains the generated RDF triples.
     */
    Model exec(Model inputModel, Context context);

    /**
     * Executes a SPARQL-Generate query. Uses the given {@code inputModel}
     * for the SPARQL SELECT part of the query. Emit generated triples to the
     * stream.
     *
     * @param inputModel the Model to use for the SPARQL SELECT part of the
     * query.
     * @param outputStream the RDF Stream object.
     */
    void exec(Model inputModel, StreamRDF outputStream);

    /**
     * Executes a SPARQL-Generate query. Uses the given {@code inputModel}
     * for the SPARQL SELECT part of the query. Emit generated triples to the
     * stream.
     *
     * @param inputModel the Model to use for the SPARQL SELECT part of the
     * query.
     * @param outputStream the RDF Stream object.
     * @param context the execution context
     */
    void exec(Model inputModel, StreamRDF outputStream, Context context);

    /**
     * Executes a SPARQL-Generate query. Uses the given {@code inputDataset}
     * for the SPARQL SELECT part of the query. And returns the generated RDF
     * triples.
     *
     * @param inputDataset the Dataset to use for the SPARQL SELECT part of the
     * query.
     * @return the Model that contains the generated RDF triples.
     */
    Model exec(Dataset inputDataset);
    
    /**
     * Executes a SPARQL-Generate query. Uses the given {@code inputDataset}
     * for the SPARQL SELECT part of the query. And returns the generated RDF
     * triples.
     *
     * @param inputDataset the Dataset to use for the SPARQL SELECT part of the
     * query.
     * @param context the execution context
     * @return the Model that contains the generated RDF triples.
     */
    Model exec(Dataset inputDataset, Context context);

    /**
     * Executes a SPARQL-Generate query. Uses the given {@code inputDataset}
     * for the SPARQL SELECT part of the query. Emit generated triples to the
     * stream.
     *
     * @param inputDataset the Dataset to use for the SPARQL SELECT part of the
     * query.
     * @param outputStream the RDF Stream object.
     */
    void exec(Dataset inputDataset, StreamRDF outputStream);

    /**
     * Executes a SPARQL-Generate query. Uses the given {@code inputDataset}
     * for the SPARQL SELECT part of the query. Emit generated triples to the
     * stream.
     *
     * @param inputDataset the Dataset to use for the SPARQL SELECT part of the
     * query.
     * @param context the execution context
     * @param outputStream the RDF Stream object.
     */
    void exec(Dataset inputDataset, StreamRDF outputStream, Context context);

    /**
     * Executes a SPARQL-Generate query. Uses the given {@code initialBindings}
     * as if they were specified in a SPARQL VALUES clause.
     * Augments the given {@code initialModel} with the generated RDF triples.
     *
     * @param initialBindings one map of variable-RDF nodes bindings.
     * @param initialModel the Model to augment with the generated RDF triples.
     */
    void exec(QuerySolution initialBindings, Model initialModel);

    /**
     * Executes a SPARQL-Generate query. Uses the given {@code initialBindings}
     * as if they were specified in a SPARQL VALUES clause.
     * Augments the given {@code initialModel} with the generated RDF triples.
     *
     * @param initialBindings one map of variable-RDF nodes bindings.
     * @param initialModel the Model to augment with the generated RDF triples.
     * @param context the execution context
     */
    void exec(QuerySolution initialBindings, Model initialModel, Context context);

   /**
     * Executes a SPARQL-Generate query. Uses the given {@code initialBindings}
     * as if they were specified in a SPARQL VALUES clause. Emit generated
     * triples to the stream.
     *
     * @param initialBindings one map of variable-RDF nodes bindings.
     * @param outputStream the RDF Stream object.
     */
    void exec(QuerySolution initialBindings, StreamRDF outputStream);

   /**
     * Executes a SPARQL-Generate query. Uses the given {@code initialBindings}
     * as if they were specified in a SPARQL VALUES clause. Emit generated
     * triples to the stream.
     *
     * @param initialBindings one map of variable-RDF nodes bindings.
     * @param outputStream the RDF Stream object.
     * @param context the execution context
     */
    void exec(QuerySolution initialBindings, StreamRDF outputStream, Context context);

    /**
     * Executes a SPARQL-Generate query. Uses the given {@code inputModel}
     * for the SPARQL SELECT part of the query. Augments the given
     * {@code initialModel} with the generated RDF triples. The behaviour if
     * the two models are equal is not specified.
     *
     * @param inputModel the Model to use for the SPARQL SELECT part of the
     * query.
     * @param initialModel the Model to augment with the generated RDF triples.
     * @throws IllegalArgumentException if the {@code initialModel} is null.
     */
    void exec(Model inputModel, Model initialModel);

    /**
     * Executes a SPARQL-Generate query. Uses the given {@code inputModel}
     * for the SPARQL SELECT part of the query. Augments the given
     * {@code initialModel} with the generated RDF triples. The behaviour if
     * the two models are equal is not specified.
     *
     * @param inputModel the Model to use for the SPARQL SELECT part of the
     * query.
     * @param initialModel the Model to augment with the generated RDF triples.
     * @param context the execution context
     * @throws IllegalArgumentException if the {@code initialModel} is null.
     */
    void exec(Model inputModel, Model initialModel, Context context);

    /**
     * Executes a SPARQL-Generate query. Uses the given {@code inputModel}
     * for the SPARQL SELECT part of the query. Uses the given
     * {@code initialBindings} as if they were specified in a SPARQL VALUES
     * clause. Augments the given {@code initialModel} with the generated RDF
     * triples. The behaviour if the two models are equal is not specified.
     *
     * @param inputModel the Model to use for the SPARQL SELECT part of the
     * query.
     * @param initialBindings one map of variable-RDF nodes bindings.
     * @param initialModel the Model to augment with the generated RDF triples.
     * @throws IllegalArgumentException if the {@code initialModel} is null.
     */
    void exec(Model inputModel, QuerySolution initialBindings,
            Model initialModel);

    /**
     * Executes a SPARQL-Generate query. Uses the given {@code inputModel}
     * for the SPARQL SELECT part of the query. Uses the given
     * {@code initialBindings} as if they were specified in a SPARQL VALUES
     * clause. Augments the given {@code initialModel} with the generated RDF
     * triples. The behaviour if the two models are equal is not specified.
     *
     * @param inputModel the Model to use for the SPARQL SELECT part of the
     * query.
     * @param initialBindings one map of variable-RDF nodes bindings.
     * @param initialModel the Model to augment with the generated RDF triples.2
     * @param context the execution context
     * @throws IllegalArgumentException if the {@code initialModel} is null.
     */
    void exec(Model inputModel, QuerySolution initialBindings,
            Model initialModel, Context context);

    /**
     * Executes a SPARQL-Generate query. Uses the given {@code inputModel}
     * for the SPARQL SELECT part of the query. Uses the given
     * {@code initialBindings} as if they were specified in a SPARQL VALUES
     * clause. Emit generated triples to the stream. 
     *
     * @param inputModel the Model to use for the SPARQL SELECT part of the
     * query.
     * @param initialBindings one map of variable-RDF nodes bindings.
     * @param outputStream the RDF Stream object.
     * @throws IllegalArgumentException if the {@code outputStream} is null.
     */
    void exec(Model inputModel, QuerySolution initialBindings,
            StreamRDF outputStream);

    /**
     * Executes a SPARQL-Generate query. Uses the given {@code inputModel}
     * for the SPARQL SELECT part of the query. Uses the given
     * {@code initialBindings} as if they were specified in a SPARQL VALUES
     * clause. Emit generated triples to the stream. 
     *
     * @param inputModel the Model to use for the SPARQL SELECT part of the
     * query.
     * @param initialBindings one map of variable-RDF nodes bindings.
     * @param outputStream the RDF Stream object.
     * @param context the execution context
     * @throws IllegalArgumentException if the {@code outputStream} is null.
     */
    void exec(Model inputModel, QuerySolution initialBindings,
            StreamRDF outputStream, Context context);

    /**
     * Executes a SPARQL-Generate query. Uses the given {@code inputDataset}
     * for the SPARQL SELECT part of the query. Augments the given
     * {@code initialModel} with the generated RDF triples. The behaviour if
     * {@code initialModel} is one of the RDF graphs in {@code inputDataset}
     * is not specified.
     *
     * @param inputDataset the Dataset to use for the SPARQL SELECT part of the
     * query.
     * @param initialModel the Model to augment with the generated RDF triples.
     * @throws IllegalArgumentException if the {@code initialModel} is null.
     */
    void exec(Dataset inputDataset, Model initialModel);

    /**
     * Executes a SPARQL-Generate query. Uses the given {@code inputDataset}
     * for the SPARQL SELECT part of the query. Augments the given
     * {@code initialModel} with the generated RDF triples. The behaviour if
     * {@code initialModel} is one of the RDF graphs in {@code inputDataset}
     * is not specified.
     *
     * @param inputDataset the Dataset to use for the SPARQL SELECT part of the
     * query.
     * @param initialModel the Model to augment with the generated RDF triples.
     * @param context the execution context
     * @throws IllegalArgumentException if the {@code initialModel} is null.
     */
    void exec(Dataset inputDataset, Model initialModel, Context context);

    /**
     * Executes a SPARQL-Generate query. Uses the given {@code inputDataset}
     * for the SPARQL SELECT part of the query. Uses the given
     * {@code initialBindings} as if they were specified in a SPARQL VALUES
     * clause. Augments the given {@code initialModel} with the generated
     * RDF triples. The behaviour if {@code initialModel} is one of the RDF
     * graphs in {@code inputDataset} is not specified.
     *
     * @param inputDataset the Dataset to use for the SPARQL SELECT part of the
     * query.
     * @param initialBindings one map of variable-RDF nodes bindings.
     * @param initialModel the Model to augment with the generated RDF triples.
     * @throws IllegalArgumentException if the {@code initialModel} is null.
     */
    void exec(Dataset inputDataset, QuerySolution initialBindings,
            Model initialModel);

    /**
     * Executes a SPARQL-Generate query. Uses the given {@code inputDataset}
     * for the SPARQL SELECT part of the query. Uses the given
     * {@code initialBindings} as if they were specified in a SPARQL VALUES
     * clause. Augments the given {@code initialModel} with the generated
     * RDF triples. The behaviour if {@code initialModel} is one of the RDF
     * graphs in {@code inputDataset} is not specified.
     *
     * @param inputDataset the Dataset to use for the SPARQL SELECT part of the
     * query.
     * @param initialBindings one map of variable-RDF nodes bindings.
     * @param initialModel the Model to augment with the generated RDF triples.
     * @param context the execution context
     * @throws IllegalArgumentException if the {@code initialModel} is null.
     */
    void exec(Dataset inputDataset, QuerySolution initialBindings,
            Model initialModel, Context context);

    /**
     * Executes a SPARQL-Generate query. Uses the given {@code inputDataset}
     * for the SPARQL SELECT part of the query. Uses the given
     * {@code initialBindings} as if they were specified in a SPARQL VALUES
     * clause. Emit generated triples to the stream. 
     *
     * @param inputDataset the Dataset to use for the SPARQL SELECT part of the
     * query.
     * @param initialBindings one map of variable-RDF nodes bindings.
     * @param outputStream the RDF Stream object.
     * @throws IllegalArgumentException if the {@code outputStream} is null.
     */
    void exec(Dataset inputDataset, QuerySolution initialBindings,
            StreamRDF outputStream);

    /**
     * Executes a SPARQL-Generate query. Uses the given {@code inputDataset}
     * for the SPARQL SELECT part of the query. Uses the given
     * {@code initialBindings} as if they were specified in a SPARQL VALUES
     * clause. Emit generated triples to the stream. 
     *
     * @param inputDataset the Dataset to use for the SPARQL SELECT part of the
     * query.
     * @param initialBindings one map of variable-RDF nodes bindings.
     * @param outputStream the RDF Stream object.
     * @param context the execution context
     * @throws IllegalArgumentException if the {@code outputStream} is null.
     */
    void exec(Dataset inputDataset, QuerySolution initialBindings,
            StreamRDF outputStream, Context context);

}
